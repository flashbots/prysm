// Code generated by fastssz. DO NOT EDIT.
// Hash: c2692ffbb81f22265a8c220fff66930bfb2e9890eafc37c462240e07050e5e8b
package builder

import (
	ssz "github.com/prysmaticlabs/fastssz"
	github_com_prysmaticlabs_prysm_v3_consensus_types_primitives "github.com/prysmaticlabs/prysm/v3/consensus-types/primitives"
)

// MarshalSSZ ssz marshals the BuilderPayloadAttributes object
func (b *BuilderPayloadAttributes) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BuilderPayloadAttributes object to a target array
func (b *BuilderPayloadAttributes) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Timestamp'
	dst = ssz.MarshalUint64(dst, b.Timestamp)

	// Field (1) 'PrevRandao'
	if size := len(b.PrevRandao); size != 32 {
		err = ssz.ErrBytesLengthFn("--.PrevRandao", size, 32)
		return
	}
	dst = append(dst, b.PrevRandao...)

	// Field (2) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(b.Slot))

	// Field (3) 'BlockHash'
	if size := len(b.BlockHash); size != 32 {
		err = ssz.ErrBytesLengthFn("--.BlockHash", size, 32)
		return
	}
	dst = append(dst, b.BlockHash...)

	return
}

// UnmarshalSSZ ssz unmarshals the BuilderPayloadAttributes object
func (b *BuilderPayloadAttributes) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 80 {
		return ssz.ErrSize
	}

	// Field (0) 'Timestamp'
	b.Timestamp = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'PrevRandao'
	if cap(b.PrevRandao) == 0 {
		b.PrevRandao = make([]byte, 0, len(buf[8:40]))
	}
	b.PrevRandao = append(b.PrevRandao, buf[8:40]...)

	// Field (2) 'Slot'
	b.Slot = github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Slot(ssz.UnmarshallUint64(buf[40:48]))

	// Field (3) 'BlockHash'
	if cap(b.BlockHash) == 0 {
		b.BlockHash = make([]byte, 0, len(buf[48:80]))
	}
	b.BlockHash = append(b.BlockHash, buf[48:80]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BuilderPayloadAttributes object
func (b *BuilderPayloadAttributes) SizeSSZ() (size int) {
	size = 80
	return
}

// HashTreeRoot ssz hashes the BuilderPayloadAttributes object
func (b *BuilderPayloadAttributes) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BuilderPayloadAttributes object with a hasher
func (b *BuilderPayloadAttributes) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Timestamp'
	hh.PutUint64(b.Timestamp)

	// Field (1) 'PrevRandao'
	if size := len(b.PrevRandao); size != 32 {
		err = ssz.ErrBytesLengthFn("--.PrevRandao", size, 32)
		return
	}
	hh.PutBytes(b.PrevRandao)

	// Field (2) 'Slot'
	hh.PutUint64(uint64(b.Slot))

	// Field (3) 'BlockHash'
	if size := len(b.BlockHash); size != 32 {
		err = ssz.ErrBytesLengthFn("--.BlockHash", size, 32)
		return
	}
	hh.PutBytes(b.BlockHash)

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}
